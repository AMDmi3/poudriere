# Design of poudriere

Poudriere is a port builder tool, it has 2 main frontend:

  * testport
  * bulk

Both are designed to build packages in a clean room, and are able to handle both the legacy pkg\_install and the new pkgng.

The code is written 100% in shell script has very few dependencies out of base.

List of dependencies that should be installed on the box runing poudriere:

 | Port | Optional | Description |
 |------|----------|-------------|
 | devel/subversion | yes | Used to be able to get the sources and ports from the FreeNSD svn |
 | devel/git | yes | Used to be able to get the ports from the FreeBSD github mirror |
 | ports-mgmt/portlint | yes | Used for testport or bulk -t to run portlint prior to building the packages |
 | ports-mgmt/pkg | yes | Used for sanity checking a pkgng repository (incremental building) |

Poudriere is composed ot jails and ports tree, it associate them to build packages.

# Data

## Jails

The poudriere jail is designed to handle the jails themself.

Configuration of a jail is stored in /usr/local/etc/poudriere.d/jails/name/\*

With the following files in the directory

 | File | Description |
 |------|-------------|
 | arch | Architecture of the jail |
 | fs | zfs dataset path if zfs is in use |
 | method | the method used to get the "sources" |
 | mnt | the path to the root of the jail on the host filesystem |
 | version | the version of the jail |

### Creating a jail

Creating a jail can be done using different method: ftp, allbsd, gjb, svn, svn+http, svn+ssh, svn+https, svn+file, csup

What ever the method used the principle is the same:
getting the binaries and the sources for a given version/architecture of FreeBSD, and prepare a minimal setup so that it result in a usable jail.

The jails will never be touched again except when specifically request for an update via "poudriere jail -u".

The jails created will then be considered as a reference of a clean vanilla jail"

the minimal setup consist in doing the following:

Modify the login.conf to add the following environment variables: 

  * UNAME\_r
  * UNAME\_v
  * OSVERSION

which will be set what is excepted on the jail in order to make sure the builds correctly discovers the release, version and OSVERSION of the jail they are building on.

Modify the make.conf to add the following variables:

  * USE\_PACKAGE\_DEPENDS=yes
  * BATCH=yes
  * WRKDIRPREFIX=/wrkdirs

Only on i386 jail when the host is amd64:

  * ARCH=i386
  * MACHINE=i386
  * MACHINE\_ARCH=i386

If the jail is created on top of a zfs filesystem, then a @clean snapshot will be created

#### method ftp

This is the default method, it fetches the prebuilt sets from the FreeBSD ftp's (default host can be tweaked via poudriere.conf)

This following set will be installed:

For version lower than 9+ jails:

  * base
  * dict
  * src
  * games
  * lib32 if the jail is a amd64 one

For version upper than 9+ jails:

  * base
  * src
  * games
  * lib32 if the jail is a amd64 one

#### method gjb/allbsd

This method is the same has ftp except that it fetches the sets out of the gjb's snapshot hsoting service or the allbsd one.

#### method svn (+\*)

This method will build the jails from sources fetching them using svn (all svn possible method are supported)

Only world is built, and the following features are supported: ccache and parallel (make -j) building.

The built jail can be tuned using src.conf:
if a src.con files exists in /usr/local/etc/poudriere.d/ on the host, it will used as the src.conf for the jail.
if a \<jailname\>-src.conf file exists in /usr/local/etc/poudriere.d/ on the host, it will be appended the the src.conf used to built the jail.

The rest is just "normal" building of world:

	make buildworld
	make installworld
	make distrib-dirs
	make distribution

#### method csup

This method is considered as deprecated and will be removed soon, it works the same as the svn method except the sources are fetched using csup.

### Updating/Upgrading jails

#### method ftp

The update of the jail is done by calling freebsd-update from inside the jail.
A parameter can be passed specify a release the user wants to jump to, in that case freebsd-update will be called to perform an upgrade to the said version.

#### method gjb/allbsd

No update/upgrade is supported if the jail as been created using the method.

#### method svn/csup

Only updates on the same branch are supported, sources will be updated, the world rebuilt and installed, once the new world is in the old files will be cleaned out:

	make delete-old
	make delete-old-libs

## Ports trees

The ports tree management can be done using the following method:

  * portsnap
  * svn+\*
  * git

the list of ports tree configured is located in /usr/local/poudriere.d/ports/\<ptname\>

With the following files in it

 | File | Description |
 |------|-------------|
 | fs | zfs dataset path if zfs is in use |
 | method | the method used to get the ports |
 | mnt | the path to the root of the ports tree on the host filesystem |

### Creating a ports tree

Ports trees are named to allow having different ports tree for example one per patch to test.

if no name is specified then the "default" one is used.

#### method portsnap

This is the default method as it requires no external dependencies.
A directory which will contain the ports tree is created, in this directory a .snap hidden directory is created to received all the portsnap temporary files.

Creation is done using the following command:

	/usr/sbin/portsnap -d ${PTMNT}/.snap -p ${PTMNT} fetch extract

PTMNT being the path to the ports tree that has been created

#### method svn

As for the jails, the svn method can support the folloing submethod:

  * svn
  * svn+http
  * svn+https
  * svn+ssh
  * svn+file

the following variable can be tweak in poudriere.conf: SVN\_HOST which by default is svn.FreeBSD.org

#### method git

Same as the two previous method except that the ports tree will be fetched out of the git

The following variable can be tweak in poudriere.conf: GIT\_URL which by default is: git://github.com/freebsd/freebsd-ports.git

### Updating the ports tree

The following command allows to update the ports tree

	poudriere ports -u -p \<name\>

according to the method used to create the command it will run the following commands:

#### Using portsnap 

	portsnap -d ${PTMNT}/.snap -p ${PTMNT} fetch update

or if run from crontab

	portsnap -d ${PTMNT}/.snap -p ${PTMNT} cron update

#### Using svn

	svn -q update

#### Using git

	git pull

# The build process

## General principles

What ever the build that are run the principle are the same.

First a reference jail is created by copying the original jail (chosen via the -j option) into the reference destination.

If the original jail has been created on top of zfs then the reference jail is created as a zfs clone of the @clean snapshot of the original jail.

Otherwise the the jail is duplicated using pax(1)

if USE\_TMPFS is set to "all" in poudriere.conf then the reference jail is mounted as tmpfs and the original jail duplicated using pax(1)

Once the reference jail is created:

The following directories are created inside the reference jail:

  * /proc
  * /dev
  * /compat/linux/proc
  * /usr/ports
  * /wrkdirs
  * /usr/local (or custom localbase is set)
  * /distfiles
  * /packages
  * /new\_packages
  * /ccache
  * /var/db/ports

Then the following filesystems are mounted in it:

  * devfs is mounted in /dev with the following rules applied:
    * everything hidden
    * null unhide
    * zero unhide
    * random unhide
    * urandom unhide
    * stdin unhide
    * stdout unhide
    * stderr unhide
    * fd unhide
    * fd/\* unhide
  * the ports dir is nullfs mounted in /usr/ports in readonly
  * the packages dir is nullfs mounted in /packages in readonly
  * the distfiles dir is nullfs mounted in /distfiles in readonly

The option directory that can be found under /usr/local/etc/poudriere.d will be mounted if they exists respecting that order:

  1. /usr/local/etc/poudriere.d/\<jailname\>-\<portstreename\>-\<setname\>-options
  2. /usr/local/etc/poudriere.d/\<jailname\>-\<portstreename\>-options
  3. /usr/local/etc/poudriere.d/\<jailname\>-options
  4. /usr/local/etc/poudriere.d/options

It will be nullfs mounted in readonly as /var/db/ports inside of the jail directory 

The reference jail is now populated:

  1. WITH\_CCACHE\_BUILD=yes is added to the jail's make.conf if CCACHE\_DIR is defined
  2. MAKE\_ENV+= CCACHE\_DIR=/ccache is added to the jail's make.conf if CCACHE\_DIR is defined
  3. PACKAGES=/packages is appended
  4. DISTDIR=/distfiles is appended

The content of the following is appended is they exists:

  1. /usr/local/etc/poudriere.d/make.conf
  2. /usr/local/etc/poudriere.d/\<jailname\>-\<portstreename\>-make.conf
  3. /usr/local/etc/poudriere.d/\<jailname\>-\<setname\>-make.conf
  4. /usr/local/etc/poudriere.d/\<jailname\>-\<portstreename\>-\<setname\>-make.conf

To finish the file correcponding to the variable RESOLV\_CONF in poudriere.conf is copied inside the jail as /etc/resolv.conf

The jail is now ready to be used

## dependency/sanitycheck

The queue calculation is done on the reference jail directly. inside the /poudriere directory

if TMPFS\_DATA is set or USE\_TMPFS is set to all then then /poudriere will be a tmpfs directory (highly recommanded)

The following directories are created inside the /poudriere directory:

  * /poudriere/pool # this is the pool of ready to build ports (no dependencies left to built)
  * /poudriere/deps # this is the pool of left ports which at least depend on one port not already built
  * /poudriere/var/run # This will receive the pids of the running builders
  * /poduriere/var/cache/origin-pkgname #cache to quickly figure out package name out of an origin
  * /poudriere/var/cache/pkgname-origin #cache to quickly figure out origin out of a packagename

It initializes the log directory in 

  * ${POUDRIERE\_DATA}/logs/bulk/\<MASTERNAME\>/\<STARTTIME\>

POUDRIERE\_DATA being /usr/local/poduriere/data by default

MASTERNAME being if setname is set: \<jailname\>-\<portstreename\>-\<setname\> otherwise  \<jailname\>-\<portstreename\>
STARTTIME begin the time of the beginning of the build is the following format: date +%Y-%m-%d\_%H:%M:%S

The different statistic files are initialized in the log directory:

 | file | default value |
 |------|---------------|
 | .poudriere.stats\_queued | 0 |
 | .poudriere.stats\_built | 0 |
 | .poudriere.stats\_failed | 0 |
 | .poudriere.stats\_ignored | 0 |
 | .poudriere.stats\_skipped | 0 |
 | .poudriere.ports.built | "" |
 | .poudriere.ports.failed | "" |
 | .poudriere.ports.ignored | "" |
 | .poudriere.ports.skipped | "" |

The dependency calculation itself is done in parallel (using one process per core by default)

For each ports listed to be built en entry is created in /poudriere/deps corresponding to the package name

All the dependency are extracted from the port via:
make -VPKG\_DEPENDS -VBUILD\_DEPENDS -VEXTRACT\_DEPENDS -VLIB\_DEPENDS -VPATCH\_DEPENDS -VFETCH\_DEPENDS -VRUN\_DEPENDS

For each dependency an entry corresponding to the dependency pkgname is added to /poudriere/deps/\<pkgname\>/\<depname\>
And also in an entry is added to /poudriere/rdeps/\<depname\>/\<pkgname\> (reverse dependency tracking)

The above process is also applied to the depname

The above will populate /poudriere/deps with all the packages that needs to be built each package will have entry for each dependency it depends on.

Now that the full dependency tree is populated, poudriere will sanity check the repository of packages if there are already packages in it
In parallel (one process per core) each package is checked and deleted if:
  1. the origin of the package doesnt exists anymore in the ports tree
  2. the version in ports is newer than the version of the package
  3. if CHECK\_CHANGED\_OPTIONS is set, the package is delete is the options activated in the ports tree for the given port are different from the one for the built package

After that poudriere will process all existing package and will delete each one for which a dependency is missing and loop on this process until, no package is deleted.

To finish with the sanity check, all the dead symlinks are deleted.

The dependency calculation process ends by looping over all the entry in /poudriere/deps each time it figures out the package already exists in the package directory then the entry is removed from the queue.

All the port with no dependency to be built (empty directories in /poudriere/deps) are now moved to /poudriere/pool as they are ready to be built straight away.

## Bulks

Before starting the bulk itself, the reference jail is marked a prepkg,
On zfs (no tmpfs) jails a new zfs snapshot @prepkg is created
On other filesystems a mtree file tracking all files of the jail is created.

The build is now started in parallel: one building jail per core will be created.

The reference jail is cloned using zfs clone or duplicated via pax. into new jails.

For each jail the following filesystems are mounted in it:

  * devfs is mounted in /dev with the following rules applied:
    * everything hidden
    * null unhide
    * zero unhide
    * random unhide
    * urandom unhide
    * stdin unhide
    * stdout unhide
    * stderr unhide
    * fd unhide
    * fd/\* unhide
  * the ports dir is nullfs mounted in /usr/ports in readonly
  * the packages dir is nullfs mounted in /packages in readonly
  * the distfiles dir is nullfs mounted in /distfiles
  * fdescfs is mounted in /dev/fd
  * procfs is mounted in /proc
  * linprocfs is mounted in /compat/linux/proc
  * the specified ccache dir if any is nullfs mounted in /ccache
  * /wrkdirs is mounted as tmpfs or mdfs according to configuration if needed
  * the option directory is nullfs mounted readonly using the same rule as for the reference jail

For each port in /poudriere/pool a job is started on one of the above builders:

  1. umount all tmpfs within the builders to cleanup their content
  2. rollback the jail file system to the @prepkg state (using zfs rollback or using mtree -r + some pax hack)
  3. cleanup /wrkdirs from any previous build
  4. install all pkg, fetch, extract, patch, build and lib dependencies if any inside a jail(8) with no network
  5. run make check-config in a jail(8) with no network
  6. run make fetch in a jail(8) with network access
  7. run make checksum in a jail(8) with network access
  8. copy the distfiles required by the port and only them into /portdistfiles and modify /etc/make.conf so that the port will pickup its distfiles only in this directory
  9. run make extract in a jail(8) with no network
  10. run make patch in a jail(8) with no network
  11. run make configure in a jail(8) with no network
  12. run make build in a jail(8) with no network
  13. run make run-depends in a jail(8) with no network
  14. run make install-mtree in a jail(8) with no network
  15. if in test mode mark the filesystem as preinst (mtree file created)
  16. run make install in a jail(8) with no network
  17. modify /etc/make.conf to that is will create its packages in /new\_packages and create that directory
  18. run make package in a jail(8) with no network
  19. if in test mode run make deinstall in a jail(8) with no network
  20. if in test mode check for leftovers by comparing the state of the filesystem with the one in the preinst mtree
  21. if all the above went ok copy the created packages from /new\_packages to the final package directory
  22. remove all the /poudriere/deps/\*/\<pkgname\> and move all the new empty directoris into /poudriere/pool so that they can be picked up in a jail for building.

Once finished (all packages built)
if the built packages are pkgng "pkg repo" in the repository (with a key to sign it is specified in poudriere.conf)
if the built packages are pkg\_install a INDEX file is created out of the packages in the repository
